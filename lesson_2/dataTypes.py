# Типи даних
# • integers: Це цілі числа без десяткової частини. Наприклад, `5` або `-10`.
# • floats: Це числа з десятковою частиною. Наприклад, `3.14` або `-0.5`.
# • strings: для зберігання тексту. Наприклад, `"Привіт, світ!"` або `'Python'`.
# • booleans: `True`  або `False`
# • lists: Список - це впорядкована послідовність елементів, які можуть бути різних типів.
# Наприклад, `[1, 2, 3]` або `['яблуко', 'банан', 'апельсин']`.
# • Кортежі (tuples): Кортеж схожий на список, але його неможливо змінити після створення.
# Кортежі визначаються за допомогою круглих дужок. Наприклад, `(1, 2, 3)`.
# • Словники (dictionaries): Словник - це колекція пар ключ-значення.
# Ви можете отримувати доступ до значень, використовуючи ключі. Наприклад, `{'ім'я': 'Петро', 'вік': 30}`.
# • Множини (sets): Множина - це колекція унікальних елементів без порядку. Наприклад, `{1, 2, 3}` значення повторюватись не можуть, тобто додати сюди ще 1 2 чи 3 не вийде.
# • `None` - це спеціальне значення, яке вказує на відсутність даних або відсутність значення.
# • Класи та об'єкти (classes and objects): Python підтримує об'єктно-орієнтоване програмування,
#  тому ви можете створювати свої власні типи даних, використовуючи класи.


# <class 'int'>
# num_1 = 5
# print(type(num_1))
#
# <class 'float'>
# num_2 =3.14
# print(type(num_2))
#
# <class 'str'>
# string = "hello"
# print(type(string))
#
# <class 'bool'>
# check = True
# print(type(check))
#
# <class 'list'>
# lst = [1, 2, 3]
# print(type(lst))
#
# <class 'tuple'>
# tpl = (1, 2, 3)
# print(type(tpl))
#
# <class 'dict'>
# dct = {'name': "Tom", 'age': 23}
# print(type(dct))
#
# <class 'set'>
# set_ex = {1, 2, 3}
# print(type(set_ex))
#
# <class 'NoneType'>
# print(type(None))
#
# <class '__main__.Person'>
# class Person:
#     pass
#
# a = Person()
# print(type(a))



#типи даних практика
lst = [1, 2, 3, 4, 5]
dct = {'name': 'Tom', 'age': 5}
name = 'Tom'
tpl = ('n', 'a', 'g')

result = dct['age'] in lst or dct['name'] in tpl
print(result)
print(dct['name'] == name and dct['age'] in lst)

